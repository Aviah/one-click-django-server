"""
Django settings for site_repo project.

Generated by 'django-admin startproject' using Django 1.8.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
import logging
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIRS = ["%s/templates/"%os.path.dirname(os.path.abspath(__file__))]

# Static script files (CSS, JavaScript)
STATIC_URL = '/static/'
STATIC_ROOT = "%s/static_root/"%BASE_DIR
STATICFILES_DIRS = ["%s/static/"%os.path.dirname(os.path.abspath(__file__))]
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Site pre-prepared media resources (logo, icons etc)
MEDIA_RES_URL = '/media/'
MEDIA_RES_ROOT = "%s/media_resources/"%BASE_DIR

# Users' uploads 
MEDIA_URL = '/uploads/'
MEDIA_ROOT = "%s/media_uploads/"%BASE_DIR

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'I_AM_NOT_SECRET_PLEASE_REPLACE_ME_SEE_README'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# logs logging.debug() to logs/debug.log
DEBUG_LOG = False 

# auto django logger of all database interactions to logs/debug_db.log. Note: to log this, also set DEBUG=True 
DEBUG_DB_LOG = False

ALLOWED_HOSTS = ['127.0.0.1','localhost']


# Cache

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': "%s/django_cache/"%BASE_DIR,
    }
}




# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'site_repo.home'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'site_repo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': TEMPLATE_DIRS,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'site_repo.django_add.context_processors.media_res',                
            ],
        },
    },
]

WSGI_APPLICATION = 'site_repo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_db',
        'USER': 'django',
        'PASSWORD':'imnotsecretdjangomysqlpassword',
        'HOST': '127.0.0.1',
        'PORT': 3306
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Check if the repository public secret, and mysql password, were replaced
if SECRET_KEY == 'I_AM_NOT_SECRET_PLEASE_REPLACE_ME_SEE_README':
    raise ImproperlyConfigured("Change the SECRET_KEY in settings, see README")

if DATABASES['default']['PASSWORD'] == 'imnotsecret' + 'djangomysqlpassword':
    raise ImproperlyConfigured("Change the django user password to MySQL, see README")


# Dev settings, available only on dev machine
try:
    from site_config.settings_dev import *
except:
    pass


# Allows a temp settings file, for dev, ad hoc logging etc
try:
    from site_config.settings_tmp import *
except:
    pass


# Production settings, available only on production
try:
    from site_config.settings_production import *
except:
    pass



# Logging:

# debug log filters, after import, to allow changes by settings_production, settings_tmp
class RequireDebugLogTrue(logging.Filter):
    def filter(self, record):
        return DEBUG_LOG    
class RequireDebugDBLogTrue(logging.Filter):
    def filter(self, record):
        return DEBUG_DB_LOG
    

# logging.debug('dev msg'), will log when DEBUG_LOG=True
# logging.getLogger('main').info('production msg'), will log when level >= info
# debug_db.log will auto log all db transaction by django when DEBUG=True & DEBUG_DB_LOG=True
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_log_true': {
            '()': RequireDebugLogTrue,
            },  
        'require_debug_db_log_true': {
            '()': RequireDebugDBLogTrue,
            },         
    },
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filters': ['require_debug_log_true'],
            'filename': "%s/logs/debug.log"%BASE_DIR,
            'maxBytes': 1024*1024*5,
            'backupCount':7,
            },
        'main': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': "%s/logs/main.log"%BASE_DIR,
            'maxBytes': 1024*1024*5,
            'backupCount':7,
            },
        'django_db': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filters': ['require_debug_db_log_true'],
            'filename': "%s/logs/debug_db.log"%BASE_DIR,
            'maxBytes': 1024*1024*5,
            'backupCount':7,
            },        
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins'],
            'propagate':True
        },
        'py.warnings': {
            'handlers': ['console'],
            'propagate':True
        },
        '': {
            'level':'DEBUG',
            'handlers': ['default'],
            'propagate':True
            },
        'main': {
            'level':'INFO',
            'handlers': ['main'],
            'propagate':True
            },
        'django.db.backends': {
            'handlers': ['django_db'],
            'propagate':False
            },         
    }
}





